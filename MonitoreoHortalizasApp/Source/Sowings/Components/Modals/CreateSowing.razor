@using AutoMapper
@using MonitoreoHortalizasApp.entities
@using MonitoreoHortalizasApp.Entities
@using MonitoreoHortalizasApp.Services
@using MonitoreoHortalizasApp.Source.SowingCycles.Services

<div class="d-flex flex-column gap-2">

    <div class="form-group">
        <label for="sowingName">
            Nombre del cultivo
        </label>
        <input Id="sowingName" class="form-control" TValue="string" @bind="Model.NombreCultivo"/>
    </div>

    <div class="form-group">
        <div class="form-group">
            <label>Ciclo de siembra</label>
            <select class="form-select" id="germinationPercentage" required @onchange="SelectSowingCycle">
                @foreach (var sowingCycle in SowingCycleOptions)
                {
                    <option value="@sowingCycle.CicloId" selected="@(sowingCycle.CicloId == Model.CicloId)">@sowingCycle.Ciclo</option>
                }
            </select>
        </div>
    </div>

    <div class="form-group">
        <label for="sowingTotalGermination">
            Germinación total
        </label>
        <NumberInput Id="sowingTotalGermination" TValue="int" @bind-Value="Model.Germinacion"></NumberInput>
    </div>

    <div class="form-group">
        <label for="sowingStartDate">
            Fecha de siembra
        </label>
        <DateInput Id="sowingStartDate" TValue="DateTime" @bind-Value="Model.FechaSiembra"></DateInput>
    </div>

    <div class="form-group">
        <label for="sowingEndDate">
            Fecha de fin
        </label>
        <DateInput Id="sowingEndDate" TValue="DateTime" @bind-Value="Model.FechaCosecha"></DateInput>
    </div>

    <div class="form-group">
        <label for="sowingIrrigationType">
            Tipo de riego
        </label>
        <input Id="sowingIrrigationType" class="form-control" TValue="string" @bind="Model.TipoRiego"/>
    </div>

    <div class="form-group">
        <label>
            Gramaje (g
        </label>
        <NumberInput TValue="double" @bind-Value="Model.Gramaje"></NumberInput>
    </div>
    
    @if (!IsEditingSowingLine)
    {
        <div class="form-group">
            <label for="sowingLine">
                Lineas de siembra
            </label>
        
            <select class="form-select" id="sowingLine" required @onchange="SelectSowingLine">
                @foreach (var sowingLine in SowingLines)
                {
                    <option
                        value="@sowingLine.LineaCultivoId"
                        selected="@(sowingLine.LineaCultivoId == SowingLineModel.LineaCultivoId)">
                        @sowingLine.NumeroLinea
                    </option>
                }
            </select>
        </div>
    }
    else
    {
        <div class="form-group">
            <label for="germinationLine">
                Linea
            </label>
            <NumberInput Id="germinationLine" TValue="int" @bind-Value="@SowingLineModel.NumeroLinea"></NumberInput>
        </div>
    }
    
    <div class="form-group">
        <label>
            Gramaje de la linea de siembra
        </label>
        <NumberInput Disabled="!IsEditingSowingLine" TValue="double"  @bind-Value="SowingLineModel.Gramaje"></NumberInput>
    </div>

    <div class="d-flex justify-content-start gap-3">
        
        @if (!IsEditingSowingLine)
        {
            <button @onclick="OnNewSowingLine" class="btn btn-outline-secondary mt-2">Nueva linea</button>
            <button disabled="@String.IsNullOrEmpty(SowingLineModel.LineaCultivoId)" @onclick="OnEditSowingLine" class="btn btn-outline-info mt-2">Editar linea</button>
        }
        else
        {
            <button @onclick="OnSubmitSowingLine" class="btn btn-outline-success mt-2">Guardar</button>
        }
        
    </div>
    
    <div class="form-group">
        <label for="description">
            Descripción
        </label>
        <textarea Id="description" class="form-control" TValue="string" @bind="Model.Descripcion"></textarea>
    </div>
    
    @if(IsFormInvalid())
    {
        <div class="text-danger">
            No hay ciclos de siembra disponibles. Por favor, agrega un ciclo de siembra antes de continuar.
        </div>
    }

    <div class="d-flex justify-content-start gap-3">
        <button type="submit" class="btn btn-primary mt-2" @onclick="OnSubmit" disabled="@IsFormInvalid()">Guardar</button>
        <button type="button" class="btn btn-secondary mt-2" @onclick="HideModal">Cancelar</button>
    </div>
</div>

@code {
#nullable enable
    // Services
    [Inject] public IMapper Mapper { get; set; } = default!;
    [Inject] IGenerateIdService GenerateIdService { get; set; } = default!;
    
    [Inject] public ISowingCycleRepository SowingCycleRepository { get; set; } = default!;
    [Inject] public ISowingRepository SowingRepository { get; set; } = default!;
    [Inject] public ISowingLineRepository SowingLineRepository { get; set; } = default!;
    
    [Inject] public SowingCycleFormService SowingCycleFormService { get; set; } = default!;

    // Modal parameters
    [Parameter] public EventCallback<Sowing> OnHideModal { get; set; }
    public Sowing Model { get; set; } = new();

    // Form fields
    private List<SowingCycle> SowingCycleOptions { get; set; } = new();
    private List<SowingLine> SowingLines { get; set; } = new();
    
    // Sowing-line modal
    private SowingLine SowingLineModel { get; set; } = new();
    
    // 
    private bool IsEditingSowingLine { set; get; }

    protected override async Task OnInitializedAsync()
    {
        SowingCycleOptions.AddRange(await SowingCycleRepository.GetSowingCycles());

        await base.OnInitializedAsync();
    }

    protected override async Task OnParametersSetAsync()
    {
        await base.OnParametersSetAsync();

        var sowingFormModel = SowingCycleFormService.Sowing;
        
        if (sowingFormModel is not null)
        {
            Model = Mapper.Map<Sowing>(sowingFormModel);
            
            // Reset sowingLines 
            SowingLines.Clear();
            var sowingLines = await SowingLineRepository.GetSowingLinesBySowingId(sowingFormModel.CultivoId);

            if (!sowingLines.Any())
            {
                return;
            }
            
            // Mark the first element as the model
            SowingLineModel = sowingLines[0];
            SowingLines.AddRange(sowingLines);
        }
        else
        {
            Model = new Sowing();
            Model.CicloId = SowingCycleOptions.FirstOrDefault()?.CicloId ?? string.Empty;
        }
    }
    
    private bool IsFormInvalid()
    {
        return SowingCycleOptions.Count < 1;
    }
    
    private void OnEditSowingLine()
    {
        IsEditingSowingLine = true;
    }
    
    private void OnNewSowingLine()
    {
        IsEditingSowingLine = true;
        SowingLineModel = new SowingLine();
    }

    private async Task OnSubmitSowingLine()
    {
        var sowingLineIndex = SowingLines.FindIndex(x => x.LineaCultivoId == SowingLineModel.LineaCultivoId);
        
        if (sowingLineIndex >= 0)
        {
            var updatedSowingLine = Mapper.Map<SowingLine>(SowingLineModel);
            
            await SowingLineRepository.UpdateSowingLine(SowingLineModel);
            SowingLines[sowingLineIndex] = updatedSowingLine;
            
            // Update the model
            SowingLineModel = Mapper.Map<SowingLine>(SowingLineModel);
        }
        else
        {
            // Create new sowing line
            var newSowingLine = Mapper.Map<SowingLine>(SowingLineModel);
            
            newSowingLine.LineaCultivoId = GenerateIdService.GenerateId();
            newSowingLine.CultivoId = Model.CultivoId;
            
            await SowingLineRepository.AddSowingLine(newSowingLine);
            SowingLines.Add(Mapper.Map<SowingLine>(newSowingLine));
            
            // Update the model
            SowingLineModel = Mapper.Map<SowingLine>(newSowingLine);
        }
        
        IsEditingSowingLine = false;
    }

    private void SelectSowingCycle(ChangeEventArgs e)
    {
        if (e.Value is not null)
        {
            Model.CicloId = e.Value.ToString();
        }
    }

    private void SelectSowingLine(ChangeEventArgs e)
    {
        if (e.Value is null) return;
        
        var selectedSowingLine = SowingLines.Find(x => x.LineaCultivoId == e.Value.ToString());

        if (selectedSowingLine is null) return;

        SowingLineModel = selectedSowingLine;
    }

    private async Task OnSubmit()
    {
        /*
         * If the SowingCycleFormService.Sowing is not null, then we are updating a sowing
         */
        if (SowingCycleFormService.Sowing is not null)
        {
            var resultUpdate = await SowingRepository.UpdateSowing(Model);
            SowingCycleFormService.ResetSowingParameter();
            await OnHideModal.InvokeAsync(resultUpdate);
            return;
        }

        /*
         * Otherwise, we are adding a new sowing
         */
        Model.CultivoId = GenerateIdService.GenerateId();
        var newSowing = await SowingRepository.AddSowing(Model);
        
        // Reset form
        SowingCycleFormService.ResetSowingParameter();
        await OnHideModal.InvokeAsync(newSowing);
    }

    private async Task HideModal()
    {
        SowingCycleFormService.ResetSowingParameter();
        await OnHideModal.InvokeAsync();
    }
}