@using AutoMapper
@using MonitoreoHortalizasApp.entities
@using MonitoreoHortalizasApp.Entities
@using MonitoreoHortalizasApp.Services
@using MonitoreoHortalizasApp.services.Events
@using MonitoreoHortalizasApp.Source.SowingCycles.Services

<div>
    <div class="form-group">
        <label for="germinationDate">Fecha de registro</label>
        <DateInput TValue="DateTime" @bind-Value="@Model.FechaRegistro" />
    </div>
    <div class="form-group">
        <label for="germinationPercentage">Ciclo</label>
        <select class="form-select" id="germinationPercentage" required @onchange="SelectSowingCycle">
            @foreach (var sowingCycle in SowingCycleOptions)
            {
                <option value="@sowingCycle.CicloId" selected="@(sowingCycle.CicloId == SelectedSowingCycleId)">@sowingCycle.Ciclo</option>
            }
        </select>
    </div>
    <div class="form-group">
        <label for="germinationPercentage">Cultivo<span class="text-danger">*</span></label>
        <select class="form-select" id="germinationPercentage" required @onchange="SelectGerminationBed">
            @foreach (var crop in SowingOptions)
            {
                <option value="@crop.CultivoId" selected="@(crop.CultivoId == Model.CultivoId)">@crop.NombreCultivo</option>
            }
        </select>
    </div>
    <div class="form-group">
        <label for="germinationPercentage">Temperatura del ambiente</label>
        <NumberInput TValue="double" @bind-Value="@Model.TemperaturaAmbiente" />
    </div>
    <div class="form-group">
        <label for="germinationPercentage">Humedad del ambiente</label>
        <NumberInput TValue="double" @bind-Value="@Model.HumedadAmbiente" />
    </div>
    <div class="form-group">
        <label for="germinationPercentage"># Zurcos germinados</label>
        <NumberInput TValue="int" @bind-Value="@Model.NumeroZurcosGerminados" />
    </div>
    <div class="form-group">
        <label for="germinationPercentage">Altura máxima tallo</label>
        <NumberInput TValue="double" @bind-Value="@Model.BroteAlturaMaxima" />
    </div>
    <div class="form-group">
        <label for="germinationPercentage">Altura mínima tallo</label>
        <NumberInput TValue="double" @bind-Value="@Model.BroteAlturaMinima" />
    </div>
    <div class="form-group">
        <label for="germinationPercentage"># Mortandad</label>
        <NumberInput TValue="double" @bind-Value="@Model.NumeroMortandad" />
    </div>
    <div class="form-group">
        <label for="germinationPercentage">Altura máxima hojas</label>
        <NumberInput TValue="double" @bind-Value="@Model.HojasAlturaMaxima" />
    </div>
    <div class="form-group">
        <label for="germinationPercentage">Altura mínima hojas</label>
        <NumberInput TValue="double" @bind-Value="@Model.HojasAlturaMinima" />
    </div>
    <div class="form-group">
        <label for="germinationPercentage">Linea</label>
        <NumberInput TValue="int" @bind-Value="@Model.Linea" />
    </div>
    <div class="form-group">
        <label for="germinationPercentage">Observaciones</label>
        <textarea class="form-control" id="germinationPercentage" rows="3" @bind="@Model.Observaciones"></textarea>
    </div>
    
    @if(IsFormInvalid())
    {
        <span class="text-danger fw-bold">
            No hay cultivos disponibles.
        </span>
    }
    
    <div class="d-flex justify-content-start gap-3">
        <button type="submit" class="btn btn-primary mt-2" @onclick="OnSubmit" disabled="@IsFormInvalid()">Guardar</button>
        <button type="button" class="btn btn-secondary mt-2" @onclick="HideModal">Cancelar</button>
    </div>
</div>

@code {
    #nullable enable
    
    // Services
    [Inject] IEventAggregator EventAggregator { get; set; } = default!;
    [Inject] IMapper Mapper { get; set; } = default!;
    [Inject] IGenerateIdService GenerateIdService { get; set; } = default!;
    
    [Inject] ISowingRepository SowingRepository { get; set; } = default!;
    [Inject] ISowingCycleRepository SowingCycleRepository { get; set; } = default!;
    [Inject] IGerminationLogRepository GerminationLogRepository { get; set; } = default!;
    [Inject] SowingCycleFormService SowingCycleFormService { get; set; } = default!;
    
    // Form fields
    private string SelectedSowingCycleId { get; set; }
    
    private List<Sowing> SowingOptions { get; set; } = new();
    private List<SowingCycle> SowingCycleOptions { get; set; } = new();
    
    public GerminationLog Model { get; set; } = new();
    
    // Parameters
    [Parameter] public EventCallback<GerminationLog> OnHideModal { get; set; }
    
    private bool IsFormInvalid()
    {
        return SowingOptions.Count < 1;
    }
    
    private void SelectGerminationBed(ChangeEventArgs e)
    {
        if (e.Value is not null)
        {
            Model.CultivoId = e.Value.ToString();
        }
    }
    
    private async Task SelectSowingCycle(ChangeEventArgs e)
    {
        if (e.Value is not null)
        {
            var cicleId = e.Value.ToString();
            var newSowingOptions = await SowingRepository.GetSowingsByCicleId(cicleId);
            
            SowingOptions.Clear();

            if (newSowingOptions.Count < 1)
            {
                return;
            }

            SowingOptions.AddRange(newSowingOptions);
            // Select the first sowing
            Model.CultivoId = SowingOptions.First().CultivoId;
        }
    }

    protected override async Task OnParametersSetAsync()
    {
        await base.OnParametersSetAsync();
        
        if (SowingCycleFormService.GerminationLog is not null)
        {
            Model = Mapper.Map<GerminationLog>(SowingCycleFormService.GerminationLog);
        }
        else
        {
            Model = new GerminationLog();
            Model.CultivoId = SowingOptions.First().CultivoId;
        }
    }

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();
        
        var sowingCycles = await SowingCycleRepository.GetSowingCycles();

        if (sowingCycles.Count < 1)
        {
            return;
        }
        
        // Initialize the select options
        SowingCycleOptions.AddRange(sowingCycles);
        
        // Set the selected sowing cycle
        SelectedSowingCycleId = SowingCycleOptions.Last().CicloId;
        SowingOptions.AddRange(await SowingRepository.GetSowingsByCicleId(SelectedSowingCycleId));
    }
    
    private async Task HideModal()
    {
        await OnHideModal.InvokeAsync();
    }
    
    private async void OnSubmit()
    {
        if (SowingCycleFormService.GerminationLog is not null)
        {
            // Update the germination log
            var resultUpdate = await GerminationLogRepository.UpdateGerminationLog(Model);
            
            // Hide the modal
            await OnHideModal.InvokeAsync(resultUpdate);
            
            return;
        }
        
        // Add a new germination log
        Model.RegistroGerminacionId = GenerateIdService.GenerateId();
        var newGerminationLog = await GerminationLogRepository.AddGerminationLog(Model);
        
        // Hide the modal
        await OnHideModal.InvokeAsync(newGerminationLog);
    }
}