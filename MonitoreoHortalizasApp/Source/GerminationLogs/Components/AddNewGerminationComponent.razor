@using MonitoreoHortalizasApp.entities
@using MonitoreoHortalizasApp.Events.Sensors
@using MonitoreoHortalizasApp.services.Events

<div>
    <div class="form-group">
        <label for="germinationDate">Fecha de registro</label>
        <DateInput TValue="DateTime" @bind-Value="@RegistrationDate" />
    </div>
    <div class="form-group">
        <label for="germinationPercentage">Cama</label>
        <select class="form-select" id="germinationPercentage" required @onchange="SelectGerminationBed">
            @foreach (var crop in CropOptions)
            {
                <option value="@crop.CultivoId" selected="@(crop.CultivoId == SelectedGerminationBed)">@crop.NombreCultivo</option>
            }
        </select>
    </div>
    <div class="form-group">
        <label for="germinationPercentage">Temperatura del ambiente</label>
        <NumberInput TValue="double" @bind-Value="@EnvironmentTemperature" />
    </div>
    <div class="form-group">
        <label for="germinationPercentage">Humedad del ambiente</label>
        <NumberInput TValue="double" @bind-Value="@EnvironmentHumidity" />
    </div>
    <div class="form-group">
        <label for="germinationPercentage"># Zurcos germinados</label>
        <NumberInput TValue="int" @bind-Value="@GerminatedFurrows" />
    </div>
    <div class="form-group">
        <label for="germinationPercentage">Altura máxima tallo</label>
        <NumberInput TValue="double" @bind-Value="@MaxStemHeight" />
    </div>
    <div class="form-group">
        <label for="germinationPercentage">Altura mínima tallo</label>
        <NumberInput TValue="double" @bind-Value="@MinStemHeight" />
    </div>
    <div class="form-group">
        <label for="germinationPercentage"># Mortandad</label>
        <NumberInput TValue="double" @bind-Value="@MortalityCount" />
    </div>
    <div class="form-group">
        <label for="germinationPercentage">Altura máxima hojas</label>
        <NumberInput TValue="double" @bind-Value="@MaxLeafHeight" />
    </div>
    <div class="form-group">
        <label for="germinationPercentage">Altura mínima hojas</label>
        <NumberInput TValue="double" @bind-Value="@MinLeafHeight" />
    </div>
    <div class="form-group">
        <label for="germinationPercentage">Linea</label>
        <NumberInput TValue="int" @bind-Value="@Line" />
    </div>
    <div class="form-group">
        <label for="germinationPercentage">Observaciones</label>
        <textarea class="form-control" id="germinationPercentage" rows="3" @bind="@Observations"></textarea>
    </div>
    
    <button type="submit" class="btn btn-primary mt-2" @onclick="OnSubmit">Guardar</button>
    <button type="button" class="btn btn-secondary mt-2" @onclick="OnCancel">Cancelar</button>
</div>

@code {
    #nullable enable
    
    // Services
    [Inject] IEventAggregator EventAggregator { get; set; } = default!;
    
    // Form fields
    private List<Sowing> CropOptions { get; set; } = new();
    
    protected DateTime RegistrationDate { get; set; } = DateTime.Now;
    private int SelectedGerminationBed { get; set; }
    private double EnvironmentTemperature { get; set; }
    private double EnvironmentHumidity { get; set; }
    private int GerminatedFurrows { get; set; }
    private double MaxStemHeight { get; set; }
    private double MinStemHeight { get; set; }
    private double MortalityCount { get; set; }
    private double MaxLeafHeight { get; set; }
    private double MinLeafHeight { get; set; }
    private int Line { get; set; }
    private string Observations { get; set; } = string.Empty;
    
    // Parameters
    [Parameter] public EventCallback OnCloseModal { get; set; } 
    [Parameter] public GerminationLog? GerminationLog { get; set; }
    
    private void SelectGerminationBed(ChangeEventArgs e)
    {
        if (e.Value is not null)
        {
            SelectedGerminationBed = int.Parse(e.Value.ToString());
        }
    }

    protected override async Task OnParametersSetAsync()
    {
        await base.OnParametersSetAsync();
        
        if (GerminationLog is not null)
        {
            RegistrationDate = GerminationLog.FechaRegistro;
            SelectedGerminationBed = GerminationLog.CultivoId;
            EnvironmentTemperature = GerminationLog.TemperaturaAmbiente;
            EnvironmentHumidity = GerminationLog.HumedadAmbiente;
            GerminatedFurrows = GerminationLog.NumeroZurcosGerminados;
            MaxStemHeight = GerminationLog.BroteAlturaMaxima;
            MinStemHeight = GerminationLog.BroteAlturaMinima;
            MortalityCount = GerminationLog.NumeroMortandad;
            MaxLeafHeight = GerminationLog.HojasAlturaMaxima;
            MinLeafHeight = GerminationLog.HojasAlturaMinima;
            Line = GerminationLog.Linea;
            Observations = GerminationLog.Observaciones;
        }
        else
        {
            SelectedGerminationBed = CropOptions.First().CultivoId;
        }
    }

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();
        
        CropOptions = new List<Sowing>
        {
            new Sowing { CultivoId = 1, NombreCultivo = "Cama automatizado 1" },
            new Sowing { CultivoId = 2, NombreCultivo = "Cama automatizado 2" },
            new Sowing { CultivoId = 3, NombreCultivo = "Cama tradicional 1" },
            new Sowing { CultivoId = 4, NombreCultivo = "Cama tradicional 2" }
        };
    }
    
    private async void OnCancel()
    {
        // Reset form fields
        RegistrationDate = DateTime.Now;
        SelectedGerminationBed = CropOptions.First().CultivoId;
        EnvironmentTemperature = 0;
        EnvironmentHumidity = 0;
        GerminatedFurrows = 0;
        MaxStemHeight = 0;
        MinStemHeight = 0;
        MortalityCount = 0;
        MaxLeafHeight = 0;
        MinLeafHeight = 0;
        Line = 0;
        Observations = string.Empty;
        
        await OnCloseModal.InvokeAsync();
    }
    
    private async void OnSubmit()
    {
        if (GerminationLog is null)
        {
            // Crear un nuevo registro
            var newGerminationLog = new GerminationLog
            {
                FechaRegistro = RegistrationDate,
                CultivoId = SelectedGerminationBed,
                TemperaturaAmbiente = EnvironmentTemperature,
                HumedadAmbiente = EnvironmentHumidity,
                NumeroZurcosGerminados = GerminatedFurrows,
                BroteAlturaMaxima = MaxStemHeight,
                BroteAlturaMinima = MinStemHeight,
                NumeroMortandad = MortalityCount,
                HojasAlturaMaxima = MaxLeafHeight,
                HojasAlturaMinima = MinLeafHeight,
                Linea = Line,
                Observaciones = Observations
            };

            // Aquí puedes añadir lógica para guardar el nuevo registro en la base de datos
            EventAggregator.Publish(new GerminationLogAddedEvent { GerminationLog = newGerminationLog });
        }
        else
        {
            // Actualizar el registro existente
            GerminationLog.FechaRegistro = RegistrationDate;
            GerminationLog.CultivoId = SelectedGerminationBed;
            GerminationLog.TemperaturaAmbiente = EnvironmentTemperature;
            GerminationLog.HumedadAmbiente = EnvironmentHumidity;
            GerminationLog.NumeroZurcosGerminados = GerminatedFurrows;
            GerminationLog.BroteAlturaMaxima = MaxStemHeight;
            GerminationLog.BroteAlturaMinima = MinStemHeight;
            GerminationLog.NumeroMortandad = MortalityCount;
            GerminationLog.HojasAlturaMaxima = MaxLeafHeight;
            GerminationLog.HojasAlturaMinima = MinLeafHeight;
            GerminationLog.Linea = Line;
            GerminationLog.Observaciones = Observations;

            // Aquí puedes añadir lógica para actualizar el registro en la base de datos
            EventAggregator.Publish(new GerminationLogUpdatedEvent { GerminationLog = GerminationLog });
        }
        
        // Clear form fields
        GerminationLog = null;
        
        await OnCloseModal.InvokeAsync();
    }
}