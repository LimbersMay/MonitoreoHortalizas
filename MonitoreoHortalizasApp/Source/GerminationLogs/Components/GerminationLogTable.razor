@using AutoMapper
@using MonitoreoHortalizasApp.entities
@using MonitoreoHortalizasApp.Services
@using MonitoreoHortalizasApp.Source.SowingCycles.Services

<Modal IsScrollable="true" IsVerticallyCentered="true" @ref="_modal" />

<div
    style="background-color: #1250b3; color: white; text-align: center; font-size: 1.5em; padding: 5px;"
    class="d-flex gap-5 justify-content-around">
    Registros de germinación
    <!-- Add a new log button -->
    <button type="button" class="btn btn-success" @onclick="ShowAddNewSowingModal">Agregar registro</button>
</div>

<Grid @ref="_grid"
      TItem="GerminationLog"
      Class="table table-hover table-striped border"
      Data="GerminationLogsReadings"
      Height="65"
      FixedHeader="true"
      AllowFiltering="true"
      PageSize="9"
      AllowPaging="true"
      Unit="Unit.Vh"
      Responsive="true"
      AllowRowClick="true"
      OnRowClick="OnRowClick">
    <GridColumns>
        <GridColumn TItem="GerminationLog"
                    HeaderText="Fecha de registro"
                    PropertyName="FechaRegistro"
                    SortKeySelector="item => item.FechaRegistro">
            @context.FechaRegistroFormatted
        </GridColumn>
        <GridColumn TItem="GerminationLog" HeaderText="Nombre de la cama" PropertyName="NombreCama" SortKeySelector="item => item.NombreCama">
            @context.NombreCama
        </GridColumn>
        <GridColumn TItem="GerminationLog" HeaderText="Ciclo de siembra" PropertyName="Ciclo" SortKeySelector="item => item.Ciclo">
            @context.Ciclo
        </GridColumn>
        <GridColumn TItem="GerminationLog" HeaderText="Linea de germinación" PropertyName="Linea" SortKeySelector="item => item.Linea">
            @context.Linea
        </GridColumn>
        <GridColumn TItem="GerminationLog" HeaderText="Temperatura del ambiente" PropertyName="TemperaturaAmbiente" SortKeySelector="item => item.TemperaturaAmbiente">
            @context.TemperaturaAmbiente °C
        </GridColumn>
        <GridColumn TItem="GerminationLog" HeaderText="Humedad del ambiente" PropertyName="HumedadAmbiente" SortKeySelector="item => item.HumedadAmbiente">
            @context.HumedadAmbiente %
        </GridColumn>
        <GridColumn TItem="GerminationLog" HeaderText="# Zurcos germinados" PropertyName="NumeroZurcosGerminados" SortKeySelector="item => item.NumeroZurcosGerminados">
            @context.NumeroZurcosGerminados
        </GridColumn>
        <GridColumn TItem="GerminationLog" HeaderText="Altura máxima brote" PropertyName="BroteAlturaMaxima" SortKeySelector="item => item.BroteAlturaMaxima">
            @context.BroteAlturaMaxima cm
        </GridColumn>
        <GridColumn TItem="GerminationLog" HeaderText="Altura mínima brote" PropertyName="BroteAlturaMaxima" SortKeySelector="item => item.BroteAlturaMaxima">
            @context.BroteAlturaMinima cm
        </GridColumn>
        <GridColumn TItem="GerminationLog" HeaderText="# Mortandad" PropertyName="NumeroMortandad" SortKeySelector="item => item.NumeroMortandad">
            @context.NumeroMortandad
        </GridColumn>
        <GridColumn TItem="GerminationLog" HeaderText="Altura máxima hojas" PropertyName="HojasAlturaMaxima" SortKeySelector="item => item.HojasAlturaMaxima">
            @context.HojasAlturaMaxima cm
        </GridColumn>
        <GridColumn TItem="GerminationLog" HeaderText="Altura mínima hojas" PropertyName="HojasAlturaMinima" SortKeySelector="item => item.HojasAlturaMinima">
            @context.HojasAlturaMinima cm
        </GridColumn>
        <GridColumn TItem="GerminationLog" HeaderText="Observaciones" PropertyName="Observaciones" SortKeySelector="item => item.Observaciones">
            @context.Observaciones
        </GridColumn>
    </GridColumns>
</Grid>

@code {
    #nullable enable
    
    // Services
    [Inject] IGerminationLogRepository GerminationLogRepository { get; set; } = default!;
    [Inject] SowingCycleFormService SowingCycleFormService { get; set; } = default!;
    
    [Inject] IMapper Mapper { get; set; } = default!;

    private Modal _modal = default!;
    private Grid<GerminationLog> _grid = default!;

    public List<GerminationLog> GerminationLogsReadings { get; set; } = new();
    
    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();
        
        GerminationLogsReadings.AddRange(await GerminationLogRepository.GetGerminationLogs());
    }
    
    private async Task OnRowClick(GridRowEventArgs<GerminationLog> args)
    {
        var parameters = new Dictionary<string, object>();
        parameters.Add("OnHideModal", EventCallback.Factory.Create(this, (GerminationLog e) => OnHideModal(e)));
        SowingCycleFormService.GerminationLog = args.Item;
        await _modal.ShowAsync<AddNewGerminationComponent>("Editar registro de germinación", parameters:parameters);
        
    }
    
    private async Task ShowAddNewSowingModal()
    {
        var parameters = new Dictionary<string, object>();
        parameters.Add("OnHideModal", EventCallback.Factory.Create(this, (GerminationLog e) => OnHideModal(e)));
        SowingCycleFormService.ResetGerminationLogParameter();
        await _modal.ShowAsync<AddNewGerminationComponent>("Crear registro en la bitácora", parameters:parameters);
    }
    
    private async Task OnHideModal(GerminationLog? germinationLog)
    {
        // Reset the form
        SowingCycleFormService.ResetGerminationLogParameter();
        
        if (germinationLog is null)
        {
            await _modal.HideAsync();
            return;
        }

        // Check if exists
        if (GerminationLogsReadings.Any(x => x.RegistroGerminacionId == germinationLog.RegistroGerminacionId))
        {
            var index = GerminationLogsReadings.FindIndex(x => x.RegistroGerminacionId == germinationLog.RegistroGerminacionId);
            GerminationLogsReadings[index] = Mapper.Map<GerminationLog>(germinationLog);
        }
        else
        {
            GerminationLogsReadings.Insert(0, Mapper.Map<GerminationLog>(germinationLog));
        }

        await _grid.RefreshDataAsync();
        await _modal.HideAsync();
    }
}
